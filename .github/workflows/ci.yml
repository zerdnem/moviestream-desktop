name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libgl1-mesa-dev xorg-dev

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libgl1-mesa-dev xorg-dev
          go mod download
          go mod tidy

      - name: Run tests
        run: |
          # Check if there are any test files
          if find . -name "*_test.go" -type f | grep -q .; then
            go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
          else
            echo "No test files found, skipping tests"
            exit 0
          fi

      - name: Upload coverage to Codecov
        if: hashFiles('**/*_test.go') != ''
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          go mod download
          go mod tidy

      - name: Build
        run: go build -ldflags="-H windowsgui -s -w" -o moviestream-windows-amd64.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: moviestream-windows-amd64
          path: moviestream-windows-amd64.exe
          retention-days: 7

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libgl1-mesa-dev xorg-dev
          go mod download
          go mod tidy

      - name: Build
        run: go build -ldflags="-s -w" -o moviestream-linux-amd64

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: moviestream-linux-amd64
          path: moviestream-linux-amd64
          retention-days: 7

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          go mod download
          go mod tidy

      - name: Build for Intel
        env:
          CGO_ENABLED: 1
          GOOS: darwin
          GOARCH: amd64
        run: go build -ldflags="-s -w" -o moviestream-macos-amd64

      - name: Build for ARM64
        env:
          CGO_ENABLED: 1
          GOOS: darwin
          GOARCH: arm64
        run: go build -ldflags="-s -w" -o moviestream-macos-arm64

      - name: Upload Intel artifact
        uses: actions/upload-artifact@v4
        with:
          name: moviestream-macos-amd64
          path: moviestream-macos-amd64
          retention-days: 7

      - name: Upload ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: moviestream-macos-arm64
          path: moviestream-macos-arm64
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.21'

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out results.sarif ./...'
        continue-on-error: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif
        continue-on-error: true

